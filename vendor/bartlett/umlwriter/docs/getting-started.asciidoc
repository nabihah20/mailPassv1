= Getting Started
:description: Startup in 5 minutes
include::revision.asciidoc[]
include::attributes.asciidoc[]
:pharstable:  http://bartlett.laurent-laville.org/get/umlwriter-1.2.0.phar


== Download

We distribute a http://www.php.net/phar[PHP Archive] (PHAR) that contains
all required dependencies of [label label-primary]#UmlWriter# bundled in a single file.

ifdef::basebackend-bootstrap[]
link:{pharstable}["Download the latest version",role="primary",icon="glyphicon-download-alt",options="block,white"]
endif::basebackend-bootstrap[]
ifndef::basebackend-bootstrap[]
link:{pharstable}[Download the latest version]
endif::basebackend-bootstrap[]

Make it executable, and put it into your `$PATH`.
[source,bash]
----
$ chmod +x umlwriter-1.2.0.phar
$ mv umlwriter-1.2.0.phar /usr/local/bin/umlwriter

$ umlwriter --version
----

You can also immediately use the PHAR after you have downloaded it.
[source,bash]
----
$ wget http://bartlett.laurent-laville.org/get/umlwriter-1.2.0.phar
$ php umlwriter-1.2.0.phar --version
----

With both methods then you have this output :

[role="output"]
====
----
umlWriter version 1.2.0
----
====

ifdef::basebackend-bootstrap[]
See other alternatives in User Guide to
link:user-guide&#45;&#45;installation.html["install UmlWriter"]
endif::basebackend-bootstrap[]


== Generating a Diagram

UML diagrams produced, may be either :

* restricted to a simple class and its direct dependencies.
* restricted to a single namespace (with all its objects).
* non-restricted (all namespaces and their objects).

The following diagram processors (output formats) are available:

* Graphviz syntax with HTML-like labels
* PlantUML syntax with default fonts and colors

TIP: Detailed descriptions and examples of the diagramming languages are available on the
{processor-gv} and {processor-puml} websites.

The following reverse-engines are supported:

* {reflector-reflect} (default in CLI mode)
* {reflector-tokenreflection}


== Generating a diagram statements from a Terminal

* In graphviz format with `bartlett/php-reflect` reverse-engine
+
[source,bash]
----
$ umlwriter diagram:render --reflector=reflect --processor=graphviz /path/to/data_source
----

* In graphviz format with `andrewsville/php-token-reflection` reverse-engine
+
[source,bash]
----
$ umlwriter diagram:render --reflector=tokenreflection --processor=graphviz /path/to/data_source
----

* In plantuml format with default reverse-engine (`bartlett/php-reflect`)
+
[source,bash]
----
$ umlwriter diagram:render --processor=plantuml /path/to/data_source
----


== Generating a diagram image

WARNING: You must have installed correctly graphviz or plantuml before to continue.

* With Graphviz and `png` output format
+
[source,bash]
----
$ dot -Tpng -O /path/to/gv_file
----
+
Where +/path/to/gv_file+ is a file contening Graphviz syntax statements produced by
the [label label-primary]#umlwriter# command.

* With PlantUML and `png` output format
+
[source,bash]
----
$ java -jar plantuml.jar -Tpng /path/to/puml_file -o /path/to/ouput/dir
----
+
Where +/path/to/puml_file+ is a file contening PlantUML syntax statements produced by
the [label label-primary]#umlwriter# command.
+
And +/path/to/output/dir+ is the directory where the image will be generated.


== Summary

[role="lead"]
Let's review what we've done :

* downloaded the latest stable PHAR version.
* created project using Composer.
* built your first graphviz and plantuml UML diagram (and `png` image) from any data source.


== Next

[role="lead"]
Choose your way depending of your skill level.

************************************************
.Read more

* Want to learn more on CLI tool,
have a look on
ifdef::basebackend-html[]
link:user-guide.html[user's guide]
endif::basebackend-html[]
ifdef::basebackend-docbook[]
xref:_user_guide[]
endif::basebackend-docbook[]

* Want to learn more about the Graphviz or PlantUML processor,
have a look on
ifdef::basebackend-html[]
link:processor-guide.html[processor's guide]
endif::basebackend-html[]
ifdef::basebackend-docbook[]
xref:_processor_guide[]
endif::basebackend-docbook[]

* Want to learn more about the compatible reverse-engine,
have a look on
ifdef::basebackend-html[]
link:reflector-guide.html[reflector's guide]
endif::basebackend-html[]
ifdef::basebackend-docbook[]
xref:_reflector_guide[]
endif::basebackend-docbook[]

************************************************
